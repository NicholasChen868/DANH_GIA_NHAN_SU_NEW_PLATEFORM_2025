// Script validation cho hệ thống 19 nhóm chuẩn
// Generated: Auto-generated by system

const fs = require('fs');
const path = require('path');

console.log('🔍 BẮT ĐẦU VALIDATION HỆ THỐNG 19 NHÓM CHUẨN...');

async function validateSystem() {
    const results = {
        success: true,
        errors: [],
        warnings: [],
        summary: {}
    };

    try {
        // 1. Kiểm tra file DIM_USERS_19_NHOM_CHUAN.xlsx
        const dimUsersFile = path.join(__dirname, '../data/DIM_USERS_19_NHOM_CHUAN.xlsx');
        if (!fs.existsSync(dimUsersFile)) {
            results.errors.push('❌ File DIM_USERS_19_NHOM_CHUAN.xlsx không tồn tại');
            results.success = false;
        } else {
            console.log('✅ File DIM_USERS_19_NHOM_CHUAN.xlsx: OK');
        }

        // 2. Kiểm tra file employees-19nhom.json
        const employeesFile = path.join(__dirname, '../frontend/public/data/employees-19nhom.json');
        if (!fs.existsSync(employeesFile)) {
            results.errors.push('❌ File employees-19nhom.json không tồn tại');
            results.success = false;
        } else {
            // Đọc và validate dữ liệu
            const employeesData = JSON.parse(fs.readFileSync(employeesFile, 'utf8'));
            console.log(`✅ File employees-19nhom.json: ${employeesData.length} records`);
            
            // Kiểm tra mapping
            const unmapped = employeesData.filter(emp => emp.nhomChuan === 'CHƯA MAPPING');
            if (unmapped.length > 0) {
                results.errors.push(`❌ Có ${unmapped.length} nhân viên chưa được mapping`);
                results.success = false;
            } else {
                console.log('✅ Mapping: 100% nhân viên đã có nhóm chuẩn');
            }

            // Thống kê nhóm
            const groupStats = {};
            employeesData.forEach(emp => {
                groupStats[emp.nhomChuan] = (groupStats[emp.nhomChuan] || 0) + 1;
            });
            results.summary.groupDistribution = groupStats;
            console.log(`✅ Phân bổ: ${Object.keys(groupStats).length} nhóm khác nhau`);
        }

        // 3. Kiểm tra config files
        const configFile = path.join(__dirname, '../frontend/src/config/nhom-19-config.js');
        if (!fs.existsSync(configFile)) {
            results.errors.push('❌ File nhom-19-config.js không tồn tại');
            results.success = false;
        } else {
            console.log('✅ File config: nhom-19-config.js OK');
        }

        const mappingFile = path.join(__dirname, '../frontend/src/config/nhom-mapping.js');
        if (!fs.existsSync(mappingFile)) {
            results.errors.push('❌ File nhom-mapping.js không tồn tại');
            results.success = false;
        } else {
            console.log('✅ File mapping: nhom-mapping.js OK');
        }

        // 4. Kiểm tra Dashboard component
        const dashboardFile = path.join(__dirname, '../frontend/src/components/Dashboard/Dashboard19Nhom.jsx');
        if (!fs.existsSync(dashboardFile)) {
            results.errors.push('❌ Dashboard19Nhom.jsx không tồn tại');
            results.success = false;
        } else {
            console.log('✅ Component Dashboard19Nhom.jsx: OK');
        }

        // 5. Kiểm tra App.js integration
        const appFile = path.join(__dirname, '../frontend/src/App.js');
        if (fs.existsSync(appFile)) {
            const appContent = fs.readFileSync(appFile, 'utf8');
            if (appContent.includes('Dashboard19Nhom')) {
                console.log('✅ App.js: Đã tích hợp Dashboard19Nhom');
            } else {
                results.warnings.push('⚠️ App.js: Chưa import Dashboard19Nhom');
            }
        }

        // 6. Validation tổng quát
        if (results.success) {
            console.log('\n🎯 KẾT QUẢ VALIDATION:');
            console.log('   ✅ Tất cả file cần thiết đã tồn tại');
            console.log('   ✅ Dữ liệu nhân viên đã được mapping 100%');
            console.log('   ✅ Config và component đã sẵn sàng');
            console.log('   ✅ Hệ thống 19 nhóm chuẩn đã triển khai thành công!');
            
            // Get employee count from file if exists
            let employeeCount = 0;
            if (fs.existsSync(employeesFile)) {
                const employeesData = JSON.parse(fs.readFileSync(employeesFile, 'utf8'));
                employeeCount = employeesData.length;
            }
            
            results.summary.totalEmployees = employeeCount;
            results.summary.totalGroups = Object.keys(results.summary.groupDistribution || {}).length;
            results.summary.mappingRate = '100%';
        }

        return results;

    } catch (error) {
        console.error('❌ Lỗi validation:', error);
        results.success = false;
        results.errors.push(`System error: ${error.message}`);
        return results;
    }
}

// Chạy validation
if (require.main === module) {
    validateSystem().then(results => {
        if (!results.success) {
            console.log('\n❌ VALIDATION THẤT BẠI:');
            results.errors.forEach(error => console.log(`   ${error}`));
            process.exit(1);
        }
        
        if (results.warnings.length > 0) {
            console.log('\n⚠️ CẢNH BÁO:');
            results.warnings.forEach(warning => console.log(`   ${warning}`));
        }
    });
}

module.exports = { validateSystem };