#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìã FORM B GENERATOR - M√î H√åNH ABC ESUHAI GROUP
üéØ Auto generate to√†n b·ªô c√¢u h·ªèi Form B cho 420 nh√¢n vi√™n
‚ú® Created by: Claude AI Assistant
üìÖ Date: 30/07/2025
"""

import json
import csv
import pandas as pd
from datetime import datetime
import os

class FormBGenerator:
    def __init__(self):
        """Kh·ªüi t·∫°o generator v·ªõi c·∫•u tr√∫c 20 nh√≥m chuy√™n m√¥n"""
        self.groups = {
            1: {"code": "BOD", "name": "Qu·∫£n l√Ω cao c·∫•p (BOD, TGƒê)", "questions": 4},
            2: {"code": "TBU", "name": "Tr∆∞·ªüng BU", "questions": 4}, 
            3: {"code": "TP", "name": "Tr∆∞·ªüng ph√≤ng", "questions": 4},
            4: {"code": "TL", "name": "Team Leader/Supervisor", "questions": 4},
            5: {"code": "MSA", "name": "Marketing, Sales, Admission", "questions": 5},
            6: {"code": "IDS", "name": "Matching & Export Services", "questions": 4},
            7: {"code": "TC", "name": "T√†i ch√≠nh - K·∫ø to√°n", "questions": 4},
            8: {"code": "NS", "name": "Nh√¢n s·ª±", "questions": 4},
            9: {"code": "IT", "name": "C√¥ng ngh·ªá th√¥ng tin", "questions": 4},
            10: {"code": "HC", "name": "H√†nh ch√≠nh - T·ªïng v·ª•", "questions": 4},
            11: {"code": "PC", "name": "Ph√°p ch·∫ø", "questions": 4},
            12: {"code": "KZ", "name": "Kaizen Yoshida School", "questions": 4},
            13: {"code": "PS", "name": "ProSkills", "questions": 4},
            14: {"code": "EC", "name": "EsuCare", "questions": 4},
            15: {"code": "ET", "name": "EsuTech", "questions": 4},
            16: {"code": "KT", "name": "Koka-Team (Vi·ªát Nam)", "questions": 4},
            17: {"code": "EW", "name": "EsuWorks", "questions": 4},
            18: {"code": "AL", "name": "ALESU", "questions": 4},
            19: {"code": "JPC", "name": "JPC - Truy·ªÅn th√¥ng & V·∫≠n h√†nh", "questions": 5},
            20: {"code": "GA", "name": "GateAwards - T∆∞ v·∫•n Du h·ªçc", "questions": 4}
        }
        
        self.output_folder = "output"
        self.ensure_output_folder()
        
    def ensure_output_folder(self):
        """T·∫°o folder output n·∫øu ch∆∞a c√≥"""
        if not os.path.exists(self.output_folder):
            os.makedirs(self.output_folder)
    
    def generate_section1_basic(self):
        """üìã SECTION 1: TH√îNG TIN C∆† B·∫¢N (13 c√¢u)"""
        questions = [
            {
                "section": "1_basic",
                "question_id": "B1_01",
                "question_type": "short_text",
                "question": "H·ªç v√† t√™n",
                "required": True,
                "description": "Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n"
            },
            {
                "section": "1_basic", 
                "question_id": "B1_02",
                "question_type": "short_text",
                "question": "M√£ nh√¢n vi√™n",
                "required": True,
                "description": "M√£ s·ªë nh√¢n vi√™n c·ªßa b·∫°n t·∫°i Esuhai"
            },
            {
                "section": "1_basic",
                "question_id": "B1_03", 
                "question_type": "multiple_choice",
                "question": "Gi·ªõi t√≠nh",
                "required": True,
                "options": ["Nam", "N·ªØ", "Kh√°c"]
            },
            {
                "section": "1_basic",
                "question_id": "B1_04",
                "question_type": "date",
                "question": "Ng√†y sinh",
                "required": True,
                "description": "ƒê·ªãnh d·∫°ng: DD/MM/YYYY"
            },
            {
                "section": "1_basic",
                "question_id": "B1_05",
                "question_type": "short_text",
                "question": "Qu√™ qu√°n",
                "required": False,
                "description": "T·ªânh/th√†nh ph·ªë qu√™ qu√°n"
            },
            {
                "section": "1_basic",
                "question_id": "B1_06",
                "question_type": "multiple_choice",
                "question": "Tr√¨nh ƒë·ªô h·ªçc v·∫•n cao nh·∫•t",
                "required": True,
                "options": ["Trung h·ªçc", "Trung c·∫•p/Cao ƒë·∫≥ng", "ƒê·∫°i h·ªçc", "Th·∫°c sƒ©", "Ti·∫øn sƒ©", "Kh√°c"]
            },
            {
                "section": "1_basic",
                "question_id": "B1_07",
                "question_type": "short_text", 
                "question": "Chuy√™n ng√†nh ƒë√£ h·ªçc",
                "required": True,
                "description": "V√≠ d·ª•: Kinh t·∫ø ƒë·ªëi ngo·∫°i, C√¥ng ngh·ªá th√¥ng tin..."
            },
            {
                "section": "1_basic",
                "question_id": "B1_08",
                "question_type": "multiple_choice",
                "question": "V·ªã tr√≠ hi·ªán t·∫°i t·∫°i Esuhai",
                "required": True,
                "options": [f"{group['code']} - {group['name']}" for group in self.groups.values()]
            },
            {
                "section": "1_basic",
                "question_id": "B1_09",
                "question_type": "date",
                "question": "Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác t·∫°i Esuhai",
                "required": True,
                "description": "ƒê·ªãnh d·∫°ng: DD/MM/YYYY"
            },
            {
                "section": "1_basic",
                "question_id": "B1_10",
                "question_type": "linear_scale",
                "question": "Ti·∫øng Anh - Kh·∫£ nƒÉng giao ti·∫øp t·ªïng th·ªÉ",
                "required": True,
                "scale_min": 1,
                "scale_max": 10,
                "description": "1 = Kh√¥ng bi·∫øt, 10 = Th√†nh th·∫°o nh∆∞ ng∆∞·ªùi b·∫£n x·ª©"
            },
            {
                "section": "1_basic",
                "question_id": "B1_11", 
                "question_type": "linear_scale",
                "question": "Ti·∫øng Nh·∫≠t - Kh·∫£ nƒÉng giao ti·∫øp t·ªïng th·ªÉ",
                "required": True,
                "scale_min": 1,
                "scale_max": 10,
                "description": "1 = Kh√¥ng bi·∫øt, 10 = Th√†nh th·∫°o nh∆∞ ng∆∞·ªùi b·∫£n x·ª©"
            },
            {
                "section": "1_basic",
                "question_id": "B1_12",
                "question_type": "multiple_choice",
                "question": "Ch·ª©ng ch·ªâ ngo·∫°i ng·ªØ cao nh·∫•t",
                "required": False,
                "options": ["Kh√¥ng c√≥", "TOEIC", "IELTS", "TOEFL", "JLPT", "NAT-TEST", "Kh√°c"]
            },
            {
                "section": "1_basic",
                "question_id": "B1_13",
                "question_type": "short_text",
                "question": "ƒêi·ªÉm s·ªë ch·ª©ng ch·ªâ (n·∫øu c√≥)",
                "required": False,
                "description": "V√≠ d·ª•: TOEIC 750, IELTS 6.5, JLPT N3..."
            }
        ]
        return questions
    
    def generate_section2_core_skills(self):
        """‚ö° SECTION 2: K·ª∏ NƒÇNG C·ªêT L√ïI (10 c√¢u) - √Åp d·ª•ng cho t·∫•t c·∫£"""
        skills = [
            {
                "skill": "Microsoft Office (Word, Excel, PowerPoint)",
                "description": "M·ª©c ƒë·ªô th√†nh th·∫°o s·ª≠ d·ª•ng b·ªô MS Office"
            },
            {
                "skill": "Giao ti·∫øp v√† Thuy·∫øt tr√¨nh",
                "description": "Kh·∫£ nƒÉng tr√¨nh b√†y √Ω ki·∫øn, thuy·∫øt ph·ª•c ng∆∞·ªùi kh√°c"
            },
            {
                "skill": "L√†m vi·ªác nh√≥m",
                "description": "Kh·∫£ nƒÉng ph·ªëi h·ª£p, h·ªó tr·ª£ ƒë·ªìng nghi·ªáp hi·ªáu qu·∫£"
            },
            {
                "skill": "Qu·∫£n l√Ω th·ªùi gian",
                "description": "Kh·∫£ nƒÉng ∆∞u ti√™n c√¥ng vi·ªác, ƒë√°p ·ª©ng deadline"
            },
            {
                "skill": "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ",
                "description": "T∆∞ duy ph√¢n t√≠ch, t√¨m gi·∫£i ph√°p cho t√¨nh hu·ªëng kh√≥"
            },
            {
                "skill": "H·ªçc h·ªèi v√† Th√≠ch ·ª©ng",
                "description": "Kh·∫£ nƒÉng ti·∫øp thu ki·∫øn th·ª©c m·ªõi, th√≠ch ·ª©ng thay ƒë·ªïi"
            },
            {
                "skill": "ChƒÉm s√≥c kh√°ch h√†ng",
                "description": "K·ªπ nƒÉng t∆∞ v·∫•n, h·ªó tr·ª£, t·∫°o s·ª± h√†i l√≤ng cho kh√°ch"
            },
            {
                "skill": "T∆∞ duy s√°ng t·∫°o",
                "description": "Kh·∫£ nƒÉng ƒë∆∞a ra √Ω t∆∞·ªüng m·ªõi, c√°ch l√†m kh√°c bi·ªát"
            },
            {
                "skill": "X·ª≠ l√Ω √°p l·ª±c",
                "description": "Kh·∫£ nƒÉng l√†m vi·ªác hi·ªáu qu·∫£ trong m√¥i tr∆∞·ªùng cƒÉng th·∫≥ng"
            },
            {
                "skill": "Tr√°ch nhi·ªám v√† Cam k·∫øt",
                "description": "M·ª©c ƒë·ªô ho√†n th√†nh c√¥ng vi·ªác ƒë√∫ng h·∫°n, ch·∫•t l∆∞·ª£ng"
            }
        ]
        
        questions = []
        for i, skill in enumerate(skills, 1):
            # C√¢u h·ªèi ƒë√°nh gi√° m·ª©c ƒë·ªô
            questions.append({
                "section": "2_core",
                "question_id": f"B2_{i:02d}a",
                "question_type": "linear_scale",
                "question": f"K·ªπ nƒÉng: {skill['skill']}",
                "required": True,
                "scale_min": 1,
                "scale_max": 10,
                "description": f"{skill['description']} (1 = R·∫•t y·∫øu, 10 = Xu·∫•t s·∫Øc)"
            })
            
            # C√¢u h·ªèi v√≠ d·ª• minh ch·ª©ng
            questions.append({
                "section": "2_core",
                "question_id": f"B2_{i:02d}b",
                "question_type": "paragraph",
                "question": f"V√≠ d·ª• minh ch·ª©ng cho k·ªπ nƒÉng '{skill['skill']}'",
                "required": True,
                "description": "N√™u 1 v√≠ d·ª• c·ª• th·ªÉ trong c√¥ng vi·ªác th·ªÉ hi·ªán k·ªπ nƒÉng n√†y (50-100 t·ª´)"
            })
        
        return questions
    
    def generate_all_questions(self):
        """T·∫°o to√†n b·ªô c√¢u h·ªèi Form B"""
        print("üöÄ B·∫Øt ƒë·∫ßu generate Form B...")
        
        all_questions = []
        
        # Section 1: Basic Info
        print("üìã Generating Section 1: Basic Info...")
        section1 = self.generate_section1_basic()
        all_questions.extend(section1)
        
        # Section 2: Core Skills
        print("‚ö° Generating Section 2: Core Skills...")
        section2 = self.generate_section2_core_skills()
        all_questions.extend(section2)
        
        return {
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "total_groups": len(self.groups),
                "sections": {
                    "basic_info": len(section1),
                    "core_skills": len(section2)
                }
            },
            "basic_questions": section1,
            "core_questions": section2
        }
    
    def export_to_csv(self, questions_data):
        """Export ra CSV ƒë·ªÉ import v√†o Google Form"""
        print("üìä Exporting to CSV...")
        
        csv_rows = []
        
        # Header
        csv_rows.append([
            "Section", "Question_ID", "Question_Type", "Question_Text", 
            "Required", "Options", "Scale_Min", "Scale_Max", "Description"
        ])
        
        # Section 1: Basic
        for q in questions_data["basic_questions"]:
            options = "|".join(q.get("options", [])) if q.get("options") else ""
            csv_rows.append([
                q["section"],
                q["question_id"], 
                q["question_type"],
                q["question"],
                "Yes" if q["required"] else "No",
                options,
                q.get("scale_min", ""),
                q.get("scale_max", ""),
                q.get("description", "")
            ])
        
        # Section 2: Core Skills  
        for q in questions_data["core_questions"]:
            csv_rows.append([
                q["section"],
                q["question_id"],
                q["question_type"], 
                q["question"],
                "Yes" if q["required"] else "No",
                "",
                q.get("scale_min", ""),
                q.get("scale_max", ""),
                q.get("description", "")
            ])
        
        # Write to CSV
        csv_file = os.path.join(self.output_folder, "form_b_questions.csv")
        with open(csv_file, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            writer.writerows(csv_rows)
        
        print(f"‚úÖ CSV exported to: {csv_file}")
        return csv_file
    
    def export_to_json(self, questions_data):
        """Export ra JSON ƒë·ªÉ backup"""
        json_file = os.path.join(self.output_folder, "form_b_structure.json")
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(questions_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON backup saved to: {json_file}")
        return json_file
    
    def generate_summary_report(self, questions_data):
        """T·∫°o b√°o c√°o t·ªïng k·∫øt"""
        total_basic = len(questions_data["basic_questions"])
        total_core = len(questions_data["core_questions"])
        
        report = f"""
üìä B√ÅO C√ÅO T·ªîNG K·∫æT FORM B GENERATOR

üéØ T·ªîNG QUAN:
- Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M')}
- T·ªïng s·ªë nh√≥m chuy√™n m√¥n: {len(self.groups)}
- T·ªïng s·ªë c√¢u h·ªèi c∆° b·∫£n: {total_basic}
- T·ªïng s·ªë c√¢u h·ªèi k·ªπ nƒÉng c·ªët l√µi: {total_core}

üìã CHI TI·∫æT:
- Section 1 - Th√¥ng tin c∆° b·∫£n: {total_basic} c√¢u
- Section 2 - K·ªπ nƒÉng c·ªët l√µi: {total_core} c√¢u

üíØ TH·ªêNG K√ä T·ªîNG TH·ªÇ:
- T·ªïng c√¢u h·ªèi: {total_basic + total_core}
- Th·ªùi gian d·ª± ki·∫øn: 2-3 gi·ªù/ng∆∞·ªùi
- D·ªØ li·ªáu thu ƒë∆∞·ª£c: ~{total_basic + total_core} ƒëi·ªÉm/ng∆∞·ªùi

üöÄ STATUS: READY FOR DEPLOYMENT!
"""
        
        report_file = os.path.join(self.output_folder, "generation_summary.txt")
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
            
        print(f"üìä Summary report saved to: {report_file}")
        print("\n" + "="*50)
        print(report)
        print("="*50)
        
        return report_file

def main():
    """Main function ƒë·ªÉ ch·∫°y generator"""
    print("üéâ FORM B GENERATOR - M√î H√åNH ABC ESUHAI GROUP")
    print("="*60)
    
    # Kh·ªüi t·∫°o generator
    generator = FormBGenerator()
    
    # Generate t·∫•t c·∫£ c√¢u h·ªèi
    questions_data = generator.generate_all_questions()
    
    # Export files
    print("\nüìÅ Exporting files...")
    csv_file = generator.export_to_csv(questions_data)
    json_file = generator.export_to_json(questions_data)
    summary_file = generator.generate_summary_report(questions_data)
    
    print(f"\nüéâ HO√ÄN TH√ÄNH! Files ƒë∆∞·ª£c t·∫°o:")
    print(f"  üìä CSV for Google Form: {csv_file}")
    print(f"  üíæ JSON backup: {json_file}")  
    print(f"  üìä Summary report: {summary_file}")
    print(f"\nüöÄ S·∫µn s√†ng tri·ªÉn khai cho 420 nh√¢n vi√™n!")

if __name__ == "__main__":
    main()
