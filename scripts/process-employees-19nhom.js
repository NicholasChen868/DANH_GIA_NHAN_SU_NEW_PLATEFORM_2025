// Script xử lý dữ liệu nhân viên thật với 19 nhóm chuẩn
// Generated: Auto-generated by system

const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// Import mapping từ file khác
const { PHONG_TO_NHOM_MAPPING } = require('./update-dim-users.js');

console.log('🔄 BẮT ĐẦU XỬ LÝ DỮ LIỆU NHÂN VIÊN VỚI 19 NHÓM CHUẨN...');

async function processEmployeesData() {
    try {
        // Đọc file Excel đã được cập nhật
        const inputFile = path.join(__dirname, '../data/DIM_USERS_19_NHOM_CHUAN.xlsx');
        const outputFile = path.join(__dirname, '../frontend/public/data/employees-19nhom.json');
        
        if (!fs.existsSync(inputFile)) {
            console.error(`❌ File không tồn tại: ${inputFile}`);
            return;
        }
        
        // Đọc file Excel
        const workbook = XLSX.readFile(inputFile);
        const worksheet = workbook.Sheets['DIM_USERS_19NHOM'];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // Headers từ dòng đầu tiên
        const headers = data[0];
        const employees = [];
        
        // Xử lý từng dòng dữ liệu
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            if (!row[0]) continue; // Skip empty rows
            
            const employee = {
                id: row[0] || `ESU${String(i).padStart(3, '0')}`,
                name: row[1] || 'Unknown',
                email: row[2] || `employee${i}@esuhai.com`,
                department: row[3] || 'Unknown',
                position: row[4] || 'Staff',
                buName: row[5] || 'Unknown',
                nhomChuan: row[headers.length - 1] || 'CHƯA MAPPING', // Cột NHÓM_CHUẨN (cột cuối cùng)
                
                // Thêm các field cần thiết cho dashboard
                status: 'Active',
                level: assignLevel(row[4] || 'Staff'),
                talentGroup: getTalentGroup(row[6] || 'CHƯA MAPPING'),
                avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(row[1] || 'Unknown')}&background=random&color=fff&size=64`,
                hireDate: generateRandomDate(),
                phone: generateRandomPhone(),
                
                // Form status - random for demo
                formStatus: {
                    formA: Math.random() > 0.3,
                    formB: Math.random() > 0.4,
                    formC: Math.random() > 0.5
                },
                
                // Form C related
                formCCount: Math.floor(Math.random() * 5),
                receivedVotes: Math.floor(Math.random() * 8) + 1,
                
                // Completion tracking
                completedForms: 0,
                lastUpdated: generateRandomDate(),
                canBeEvaluated: true
            };
            
            // Tính số form đã hoàn thành
            employee.completedForms = (employee.formStatus.formA ? 1 : 0) + 
                                    (employee.formStatus.formB ? 1 : 0) + 
                                    (employee.formStatus.formC ? 1 : 0);
            
            employees.push(employee);
        }
        
        // Lưu file JSON
        fs.writeFileSync(outputFile, JSON.stringify(employees, null, 2), 'utf8');
        
        // Thống kê
        const stats = generateStatistics(employees);
        
        console.log(`✅ Đã xử lý thành công ${employees.length} nhân viên`);
        console.log(`📁 File output: ${outputFile}`);
        console.log('📊 Thống kê theo nhóm chuẩn:');
        
        Object.entries(stats.byNhomChuan).forEach(([nhom, count]) => {
            console.log(`   - ${nhom}: ${count} người`);
        });
        
        console.log('📈 Thống kê form:');
        console.log(`   - Form A: ${stats.formA} người (${(stats.formA/employees.length*100).toFixed(1)}%)`);
        console.log(`   - Form B: ${stats.formB} người (${(stats.formB/employees.length*100).toFixed(1)}%)`);
        console.log(`   - Form C: ${stats.formC} người (${(stats.formC/employees.length*100).toFixed(1)}%)`);
        
        return {
            success: true,
            employeeCount: employees.length,
            outputFile,
            stats
        };
        
    } catch (error) {
        console.error('❌ Lỗi khi xử lý dữ liệu nhân viên:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

function assignLevel(position) {
    const position_lower = position.toLowerCase();
    
    if (position_lower.includes('giám đốc') || position_lower.includes('ceo') || position_lower.includes('chủ tịch')) {
        return 'Executive';
    } else if (position_lower.includes('trưởng') || position_lower.includes('phó') || position_lower.includes('manager')) {
        return 'Management';
    } else if (position_lower.includes('senior') || position_lower.includes('chuyên viên') || position_lower.includes('chuyên gia')) {
        return 'Senior';
    } else {
        return 'Staff';
    }
}

function getTalentGroup(nhomChuan) {
    const talentGroups = [
        'High Potential', 'Core Performer', 'Emerging Talent', 
        'Specialist', 'Leadership Track', 'Technical Expert'
    ];
    return talentGroups[Math.floor(Math.random() * talentGroups.length)];
}

function generateRandomDate() {
    const start = new Date(2020, 0, 1);
    const end = new Date();
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toISOString();
}

function generateRandomPhone() {
    return `0${Math.floor(Math.random() * 9) + 1}${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`;
}

function generateStatistics(employees) {
    const stats = {
        total: employees.length,
        byNhomChuan: {},
        byDepartment: {},
        byLevel: {},
        formA: 0,
        formB: 0,
        formC: 0,
        averageCompletion: 0
    };
    
    employees.forEach(emp => {
        // By Nhóm Chuẩn
        stats.byNhomChuan[emp.nhomChuan] = (stats.byNhomChuan[emp.nhomChuan] || 0) + 1;
        
        // By Department
        stats.byDepartment[emp.department] = (stats.byDepartment[emp.department] || 0) + 1;
        
        // By Level
        stats.byLevel[emp.level] = (stats.byLevel[emp.level] || 0) + 1;
        
        // Form completion
        if (emp.formStatus.formA) stats.formA++;
        if (emp.formStatus.formB) stats.formB++;
        if (emp.formStatus.formC) stats.formC++;
    });
    
    stats.averageCompletion = (stats.formA + stats.formB + stats.formC) / (employees.length * 3) * 100;
    
    return stats;
}

// Chạy script
if (require.main === module) {
    processEmployeesData();
}

module.exports = { processEmployeesData };