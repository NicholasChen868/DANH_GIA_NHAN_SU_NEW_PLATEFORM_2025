// Script t·ª± ƒë·ªông c·∫≠p nh·∫≠t DIM_USERS v·ªõi 19 nh√≥m chu·∫©n
// Generated: Auto-generated by system

const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

console.log('üîÑ B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T DIM_USERS V·ªöI 19 NH√ìM CHU·∫®N...');

// Mapping t·ª´ PH√íNG sang 19 nh√≥m chu·∫©n
const PHONG_TO_NHOM_MAPPING = {
    "ALESU_CNTT": "Alesu CNTT",
    "ALESU_TRUY·ªÄN TH√îNG": "Alesu Truy·ªÅn Th√¥ng", 
    "BAN TH∆Ø K√ù TR·ª¢ L√ù": "Ban Th∆∞ K√Ω Tr·ª£ L√Ω",
    "BOD (BAN T·ªîNG GI√ÅM ƒê·ªêC)": "BOD - Ban T·ªïng Gi√°m ƒê·ªëc",
    "ESUCARE": "EsuCare - ChƒÉm s√≥c con ng∆∞·ªùi",
    "ESUTECH": "EsuTech - K·ªπ s∆∞ & Outsourcing",
    "ESUWORKS": "EsuWorks - Tuy·ªÉn d·ª•ng trong n∆∞·ªõc",
    "GATE AWARDS": "Gate Awards - T∆∞ v·∫°n du h·ªçc cao c·∫•p",
    "IDS": "IDS - International Dispatch Services",
    "JPC": "JPC - Japan Professional College",
    "KAIZEN": "Kaizen Yoshida School",
    "Kaizen": "Kaizen Yoshida School", 
    "KOKATEAM": "Kokateam Vi·ªát Nam",
    "MSA": "MSA - Marketing Sales Admission",
    "NH√ÇN S·ª∞": "Nh√¢n S·ª±", 
    "PH√ÅP CH·∫æ": "Ph√°p Ch·∫ø",
    "PROSKILLS": "ProSkills - Ph√°t tri·ªÉn k·ªπ nƒÉng",
    "T√ÄI CH√çNH K·∫æ TO√ÅN": "T√†i Ch√≠nh K·∫ø To√°n",
    "T·ªîNG H·ª¢P": "T·ªïng H·ª£p - H√†nh ch√≠nh"
};

async function updateDimUsers() {
    try {
        const inputFile = path.join(__dirname, '../data/DIM_USERS_19_BLOCKS_01082025.xlsx');
        const outputFile = path.join(__dirname, '../data/DIM_USERS_19_NHOM_CHUAN.xlsx');
        
        // Check if input file exists
        if (!fs.existsSync(inputFile)) {
            console.error(`‚ùå File kh√¥ng t·ªìn t·∫°i: ${inputFile}`);
            return;
        }
        
        // ƒê·ªçc file g·ªëc
        const workbook = XLSX.readFile(inputFile);
        const worksheet = workbook.Sheets['DIM_USERS'];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // Th√™m c·ªôt NH√ìM_CHU·∫®N
        const headers = data[0];
        const newHeaders = [...headers, 'NH√ìM_CHU·∫®N'];
        const newData = [newHeaders];
        
        // Statistics
        const stats = {};
        let unmappedCount = 0;
        
        // X·ª≠ l√Ω t·ª´ng d√≤ng
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            const phong = row[3]; // C·ªôt PH√íNG
            const nhomChuan = PHONG_TO_NHOM_MAPPING[phong] || 'CH∆ØA MAPPING';
            const newRow = [...row, nhomChuan];
            newData.push(newRow);
            
            // Count statistics
            stats[nhomChuan] = (stats[nhomChuan] || 0) + 1;
            
            if (nhomChuan === 'CH∆ØA MAPPING') {
                unmappedCount++;
                console.warn(`‚ö†Ô∏è Ch∆∞a mapping: ${phong}`);
            }
        }
        
        // T·∫°o workbook m·ªõi v·ªõi nhi·ªÅu sheets
        const newWorkbook = XLSX.utils.book_new();
        
        // Sheet 1: D·ªØ li·ªáu ch√≠nh
        const newWorksheet = XLSX.utils.aoa_to_sheet(newData);
        XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, 'DIM_USERS_19NHOM');
        
        // Sheet 2: Th·ªëng k√™
        const summaryData = [
            ['STT', 'C·ª§M NH√ìM', 'NH√ìM CHU·∫®N', 'S·ªê L∆Ø·ª¢NG'],
            ['', '', '', ''],
            ['', 'üéØ NH√ìM KINH DOANH T∆Ø V·∫§N TUY·∫æN ƒê·∫¶U', '', ''],
            [1, '', 'MSA - Marketing Sales Admission', stats['MSA - Marketing Sales Admission'] || 0],
            [2, '', 'Kokateam Vi·ªát Nam', stats['Kokateam Vi·ªát Nam'] || 0],
            [3, '', 'EsuWorks - Tuy·ªÉn d·ª•ng trong n∆∞·ªõc', stats['EsuWorks - Tuy·ªÉn d·ª•ng trong n∆∞·ªõc'] || 0],
            [4, '', 'Gate Awards - T∆∞ v·∫°n du h·ªçc cao c·∫•p', stats['Gate Awards - T∆∞ v·∫°n du h·ªçc cao c·∫•p'] || 0],
            ['', '', '', ''],
            ['', 'üìö NH√ìM ƒê√ÄO T·∫†O GI√ÅO D·ª§C', '', ''],
            [5, '', 'Kaizen Yoshida School', stats['Kaizen Yoshida School'] || 0],
            [6, '', 'JPC - Japan Professional College', stats['JPC - Japan Professional College'] || 0],
            [7, '', 'ProSkills - Ph√°t tri·ªÉn k·ªπ nƒÉng', stats['ProSkills - Ph√°t tri·ªÉn k·ªπ nƒÉng'] || 0],
            [8, '', 'EsuCare - ChƒÉm s√≥c con ng∆∞·ªùi', stats['EsuCare - ChƒÉm s√≥c con ng∆∞·ªùi'] || 0],
            ['', '', '', ''],
            ['', '‚öôÔ∏è NH√ìM D·ªäCH V·ª§ V·∫¨N H√ÄNH', '', ''],
            [9, '', 'IDS - International Dispatch Services', stats['IDS - International Dispatch Services'] || 0],
            [10, '', 'EsuTech - K·ªπ s∆∞ & Outsourcing', stats['EsuTech - K·ªπ s∆∞ & Outsourcing'] || 0],
            [11, '', 'Nh√¢n S·ª±', stats['Nh√¢n S·ª±'] || 0],
            [12, '', 'T·ªïng H·ª£p - H√†nh ch√≠nh', stats['T·ªïng H·ª£p - H√†nh ch√≠nh'] || 0],
            ['', '', '', ''],
            ['', 'üîß NH√ìM H·ªñ TR·ª¢ CHUY√äN M√îN', '', ''],
            [13, '', 'Ph√°p Ch·∫ø', stats['Ph√°p Ch·∫ø'] || 0],
            [14, '', 'T√†i Ch√≠nh K·∫ø To√°n', stats['T√†i Ch√≠nh K·∫ø To√°n'] || 0],
            [15, '', 'Alesu Truy·ªÅn Th√¥ng', stats['Alesu Truy·ªÅn Th√¥ng'] || 0],
            [16, '', 'Alesu CNTT', stats['Alesu CNTT'] || 0],
            ['', '', '', ''],
            ['', 'üëë NH√ìM QU·∫¢N L√ù ƒêI·ªÄU H√ÄNH', '', ''],
            [17, '', 'Ban Th∆∞ K√Ω Tr·ª£ L√Ω', stats['Ban Th∆∞ K√Ω Tr·ª£ L√Ω'] || 0],
            [18, '', 'BOD - Ban T·ªïng Gi√°m ƒê·ªëc', stats['BOD - Ban T·ªïng Gi√°m ƒê·ªëc'] || 0],
            ['', '', '', ''],
            ['', '‚ùå CH∆ØA MAPPING', '', stats['CH∆ØA MAPPING'] || 0],
            ['', '', '', ''],
            ['', 'üìä T·ªîNG C·ªòNG', '', Object.values(stats).reduce((sum, count) => sum + count, 0)]
        ];
        
        const summaryWorksheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(newWorkbook, summaryWorksheet, 'THONG_KE_19_NHOM');
        
        // L∆∞u file
        XLSX.writeFile(newWorkbook, outputFile);
        
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng: ${outputFile}`);
        console.log(`üìä T·ªïng s·ªë nh√¢n vi√™n: ${newData.length - 1}`);
        console.log(`‚ö†Ô∏è Ch∆∞a mapping: ${unmappedCount} nh√¢n vi√™n`);
        console.log('üìà Th·ªëng k√™ theo nh√≥m:');
        Object.entries(stats).forEach(([nhom, count]) => {
            console.log(`   - ${nhom}: ${count} ng∆∞·ªùi`);
        });
        
        return {
            success: true,
            totalRecords: newData.length - 1,
            unmappedCount,
            stats
        };
        
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t DIM_USERS:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Ch·∫°y script
if (require.main === module) {
    updateDimUsers();
}

module.exports = { updateDimUsers, PHONG_TO_NHOM_MAPPING };